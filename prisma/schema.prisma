// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filterJson"]
}

model Featured {
  id           String     @id @default(uuid())
  slot         Int        @unique
  active       Boolean    @default(false)
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model Collection {
  id                    String      @id @default(uuid())
  slug                  String      @unique
  show                  Boolean     @default(false)
  contractAddress       String
  name                  String
  description           String      @db.VarChar(4000)
  bannerImageUrl        String?
  imageUrl              String?
  largeImageUrl         String?
  discordUrl            String?
  externalUrl           String?
  twitterUsername       String?
  oneDayVolume          Float
  oneDayChange          Float
  oneDaySales           Int
  oneDayAveragePrice    Float
  sevenDayVolume        Float
  sevenDayChange        Float
  sevenDaySales         Int
  sevenDayAveragePrice  Float
  thirtyDayVolume       Float
  thirtyDayChange       Float
  thirtyDaySales        Int
  thirtyDayAveragePrice Float
  totalVolume           Float
  totalSales            Int
  totalSupply           Int
  numOwners             Int
  averagePrice          Float
  numReports            Int
  marketCap             Float?
  floorPrice            Float?
  updatedAt             DateTime    @updatedAt
  createdAt             DateTime    @default(now())
  featureds             Featured[]
  assets                Asset[]
  attributes            Attribute[]
}

model Upcoming {
  id              String    @id @default(uuid())
  featured        Boolean   @default(false)
  imageUrl        String
  name            String
  description     String    @db.VarChar(500)
  presalePrice    Float?
  presaleDate     DateTime?
  price           Float
  releaseDate     DateTime
  supply          Int
  currency        String
  twitterUsername String?
  discordUrl      String?
  externalUrl     String?
  updatedAt       DateTime  @updatedAt
  createdAt       DateTime  @default(now())
}

model Asset {
  id             String     @id @default(uuid())
  assetId        String     @unique
  slug           String
  tokenId        String
  name           String
  imageUrl       String
  attributeCount Int
  defaultScore   Float
  defaultRank    Int
  metadata       Json
  collectionId   String
  collection     Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  traits         Trait[]

  @@index([slug])
}

model Attribute {
  id             String     @id @default(uuid())
  attributeId    String     @unique
  attributeType  String
  attributeCount Int        @default(0)
  collectionId   String
  collection     Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  traits         Trait[]

  @@index([collectionId])
}

model Trait {
  id            String    @id @default(uuid())
  traitId       String    @unique
  attributeType String
  traitType     String
  traitCount    Int
  percentile    Float
  defaultScore  Float
  attributeId   String
  attribute     Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  assets        Asset[]

  @@index([attributeId])
}
