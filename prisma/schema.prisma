// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb", "filterJson"]
}

model Featured {
  id           String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  type         String
  slot         Int
  active       Boolean    @default(false)
  collectionId String     @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model Project {
  id              String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  featured        Boolean  @default(false)
  image           String
  name            String
  description     String
  price           String
  supply          Int
  website         String?
  discord         String?
  twitterUsername String?
  releaseDate     DateTime
}

model Collection {
  id                    String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
  show                  Boolean     @default(false)
  blockchain            String
  slug                  String      @unique
  name                  String
  description           String
  imageUrl              String?
  largeImageUrl         String?
  bannerImageUrl        String?
  contracts             String[]
  medias                Json
  oneDayVolume          Float
  oneDayChange          Float
  oneDaySales           Int
  oneDayAveragePrice    Float
  sevenDayVolume        Float
  sevenDayChange        Float
  sevenDaySales         Int
  sevenDayAveragePrice  Float
  thirtyDayVolume       Float
  thirtyDayChange       Float
  thirtyDaySales        Int
  thirtyDayAveragePrice Float
  totalVolume           Float
  totalSales            Int
  totalSupply           Int
  numOwners             Int
  averagePrice          Float
  marketCap             Float
  floorPrice            Float?
  updatedAt             DateTime    @updatedAt
  createdAt             DateTime    @default(now())
  assets                Asset[]
  attributes            Attribute[]
  featureds             Featured[]
}

model Asset {
  id             String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  assetId        String     @unique
  slug           String
  tokenId        String
  name           String
  image          String
  metadata       Json[]
  attributeCount Int
  defaultScore   Float
  defaultRank    Int
  collectionId   String     @db.ObjectId
  collection     Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  traitIds       String[]   @db.Array(ObjectId)
  traits         Trait[]    @relation(fields: [traitIds], onDelete: Cascade)
  updatedAt      DateTime   @updatedAt
  createdAt      DateTime   @default(now())
}

model Attribute {
  id            String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  attributeId   String     @unique
  attributeType String
  collectionId  String     @db.ObjectId
  collection    Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  traits        Trait[]
}

model Trait {
  id            String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  traitId       String    @unique
  attributeType String
  traitType     String
  traitCount    Int
  percentile    Float
  defaultScore  Float
  attributeId   String    @db.ObjectId
  attribute     Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  assetIds      String[]  @db.Array(ObjectId)
  assets        Asset[]   @relation(fields: [assetIds], onDelete: Cascade)
}

model MintCollection {
  id             String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  contract       String   @unique
  name           String
  description    String?
  slug           String
  imageUrl       String?
  largeImageUrl  String?
  bannerImageUrl String?
  medias         Json
  mints          Mint[]
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
}

model Mint {
  id           String         @id @default(dbgenerated()) @map("_id") @db.ObjectId
  txHash       String
  eth          Float
  gas          Float
  collectionId String         @db.ObjectId
  collection   MintCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
}
