// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model Admin {
  id       String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  email    String @unique
  password String
  name     String @default("Name")
}

model Featured {
  id           String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  slot         Int        @unique
  active       Boolean    @default(false)
  collectionId String     @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model Collections {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  type      String   @unique
  slugs     String[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Collection {
  id                    String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
  slug                  String      @unique
  show                  Boolean     @default(false)
  contractAddress       String
  name                  String
  description           String
  bannerImageUrl        String?
  imageUrl              String?
  largeImageUrl         String?
  discordUrl            String?
  externalUrl           String?
  twitterUsername       String?
  instagramUsername     String?
  oneDayVolume          Float
  oneDayChange          Float
  oneDaySales           Int
  oneDayAveragePrice    Float
  sevenDayVolume        Float
  sevenDayChange        Float
  sevenDaySales         Int
  sevenDayAveragePrice  Float
  thirtyDayVolume       Float
  thirtyDayChange       Float
  thirtyDaySales        Int
  thirtyDayAveragePrice Float
  totalVolume           Float
  totalSales            Int
  totalSupply           Int
  numOwners             Int
  averagePrice          Float
  numReports            Int
  marketCap             Float
  floorPrice            Float
  updatedAt             DateTime    @updatedAt
  createdAt             DateTime    @default(now())
  asset                 Asset[]
  attribute             Attribute[]
  featured              Featured[]
}

model Upcoming {
  id              String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  featured        Boolean   @default(false)
  imageUrl        String
  name            String
  description     String
  presalePrice    Float?
  presaleDate     DateTime?
  price           Float
  releaseDate     DateTime
  supply          Int
  currency        String
  twitterUsername String?
  discordUrl      String?
  externalUrl     String?
  updatedAt       DateTime  @updatedAt
  createdAt       DateTime  @default(now())
}

model Asset {
  id             String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  assetId        String     @unique
  tokenId        String
  name           String
  imageUrl       String
  attributeCount Int
  attributeScore Float?
  collectionId   String     @db.ObjectId
  collection     Collection @relation(fields: [collectionId], references: [id])
  traitIds       String[]   @db.Array(String)
  traits         Trait[]    @relation(fields: [traitIds])
  rank           Rank[]
}

model Attribute {
  id             String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  attributeId    String     @unique
  attributeType  String
  attributeCount Int?       @default(0)
  collectionId   String     @db.ObjectId
  collection     Collection @relation(fields: [collectionId], references: [id])
  trait          Trait[]
}

model Trait {
  id           String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  traitId      String    @unique
  traitType    String
  traitCount   Int
  percentile   Float?
  defaultScore Float?
  attributeId  String    @db.String
  attribute    Attribute @relation(fields: [attributeId], references: [attributeId])
  assetIds     String[]  @db.Array(String)
  assets       Asset[]   @relation(fields: [assetIds])
}

model Rank {
  id           String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  rankId       String @unique
  tokenId      String
  type         String
  defaultScore Float
  defaultRank  Int
  assetId      String @db.ObjectId
  asset        Asset  @relation(fields: [assetId], references: [id])
}
